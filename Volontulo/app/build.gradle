apply plugin: 'com.android.application'
apply plugin: 'android-apt'
apply plugin: 'realm-android'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    defaultConfig {
        applicationId "com.stxnext.volontulo"
        minSdkVersion 15
        targetSdkVersion 23
        versionCode autoVersionCode()
        versionName autoVersionName()
    }

    sourceSets.main {
        jni.srcDirs = []
        jniLibs.srcDirs 'src/main/jniLibs'
    }

    signingConfigs {
        debug {
            storeFile file("keystore/debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }

        release {
            Properties props = loadProjectProperties("StxNextKeys.repo", "VolontuloAndroid.properties")
            if (project.hasProperty("StxNextKeys.repo")) {
                storeFile file(project.property("StxNextKeys.repo") + props['RELEASE_STORE_FILE'])
                storePassword props['RELEASE_STORE_PASS']
                keyAlias props['RELEASE_ALIAS']
                keyPassword props['RELEASE_KEY_PASS']
            }
        }
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            signingConfig signingConfigs.debug
        }

        release {
            debuggable false
            minifyEnabled true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    productFlavors {
        fakeBackend {
            applicationId "com.stxnext.volontulo"
        }
        realBackend {
            applicationId "com.stxnext.volontulo"
        }
    }

    android.applicationVariants.all { variant ->
        task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
            description "Generates Javadoc for $variant.name."
            setDependsOn(["assemble${variant.name.capitalize()}"])
            source = variant.javaCompile.source
            ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
            classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)

            options.links("http://docs.oracle.com/javase/7/docs/api/");
            options.links("http://d.android.com/reference/");

            exclude '**/BuildConfig.java'
            exclude '**/R.java'
        }

        variant.assemble.doLast {
            println "APK: ${variant.outputs[0].outputFile}"
            println "Version: ${autoVersionName()} (${autoVersionCode()})"
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:support-v4:23.3.0'
    compile 'com.android.support:appcompat-v7:23.3.0'
    compile 'com.android.support:design:23.3.0'
    compile 'com.android.support:palette-v7:23.3.0'
    compile 'com.android.support:recyclerview-v7:23.3.0'
    compile 'com.android.support:cardview-v7:23.3.0'
    compile 'com.jakewharton:butterknife:8.0.1'
    apt 'com.jakewharton:butterknife-compiler:8.0.1'
    compile 'net.danlew:android.joda:2.9.3'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'org.parceler:parceler-api:1.1.1'
    apt 'org.parceler:parceler:1.1.1'
    compile 'com.google.android.gms:play-services-location:8.4.0'
    compile 'com.google.code.gson:gson:2.4'
    compile 'com.squareup.retrofit2:retrofit:2.0.2'
    compile 'com.squareup.retrofit2:converter-gson:2.0.2'
    compile 'com.squareup.okhttp3:okhttp:3.2.0'
    compile 'com.squareup.okhttp3:logging-interceptor:3.2.0'
    compile 'com.jakewharton.timber:timber:4.1.2'

    debugCompile 'io.palaima.debugdrawer:debugdrawer:0.7.0'
    releaseCompile 'io.palaima.debugdrawer:debugdrawer-no-op:0.7.0'

    debugCompile 'io.palaima.debugdrawer:debugdrawer-view:0.7.0'
    releaseCompile 'io.palaima.debugdrawer:debugdrawer-view-no-op:0.7.0'

    debugCompile 'io.palaima.debugdrawer:debugdrawer-commons:0.7.0'
    debugCompile 'io.palaima.debugdrawer:debugdrawer-actions:0.7.0'
    debugCompile 'io.palaima.debugdrawer:debugdrawer-okhttp:0.7.0'
    debugCompile 'io.palaima.debugdrawer:debugdrawer-okhttp3:0.7.0'
    debugCompile 'io.palaima.debugdrawer:debugdrawer-picasso:0.7.0'
    debugCompile 'com.jakewharton.scalpel:scalpel:1.1.2'
    debugCompile 'io.palaima.debugdrawer:debugdrawer-scalpel:0.7.0'
    debugCompile 'io.palaima.debugdrawer:debugdrawer-location:0.7.0'
    debugCompile 'io.palaima.debugdrawer:debugdrawer-timber:0.7.0'

    compile ('com.crashlytics.sdk.android:crashlytics:2.5.5@aar') {
        transitive = true;
    }
}

def autoVersionCode() {
    return Integer.parseInt("git rev-list HEAD --first-parent --count".execute().text.trim())
}

def gitHash() {
    return "git rev-parse --short HEAD".execute().text.trim()
}

def gitTag() {
    return "git describe --tags --abbrev=0".execute().text.trim() ?: "0.0.1"
}

def autoVersionName() {
    return hasProperty("publish") ? "${gitTag()}" : "${gitTag()}-${gitHash()}"
}

afterEvaluate {
    makeFabricProperties()
}

def loadProjectProperties(String repoKeyName, String propertiesFilename, boolean aggressiveStop = false) {
    Properties props = new Properties();
    if (project.hasProperty(repoKeyName)) {
        def projectPropertyFile = file(project.property(repoKeyName) + File.separator + propertiesFilename)
        if (projectPropertyFile.exists()) {
            props.load(new FileInputStream(projectPropertyFile))
        } else {
            def cannotFind = "${projectPropertyFile.getAbsolutePath()} not exist"
            logger.log(LogLevel.WARN, cannotFind)
        }
    } else {
        def message = "Please configure compilation environment - ${repoKeyName} property is not found"
        logger.log(LogLevel.WARN, message)
    }
    return props
}

def makeFabricProperties() {
    Properties props = loadProjectProperties("StxNextKeys.repo", "VolontuloAndroid.properties")
    def commentMessage = "This is autogenerated Fabric.io properties file from prevent storing them in source control system."
    if (!props.isEmpty()) {
        ant.propertyfile(file: 'fabric.properties', comment: commentMessage) {
            entry(key: 'apiKey', value: props['FABRIC_API_KEY'])
            entry(key: 'apiSecret', value: props['FABRIC_SECRET_KEY'])
        }
    } else {
        ant.propertyfile(file: 'fabric.properties', comment: commentMessage) {
            entry(key: 'apiKey', value: FABRIC_API_KEY)
            entry(key: 'apiSecret', value: FABRIC_SECRET_KEY)
        }
    }
}
